/// Display Register Controller
module disp_regctrl (
    // System Signals
    ACLK: input clock, /// AXI side clock
    ARST: input reset, /// AXI side reset

    // VSYNC
    DSP_VSYNC_X: input logic, /// VSYNC from syncgen

    // Register bus
    WRADDR: input  logic<16>,
    BYTEEN: input  logic<4> ,
    WREN  : input  logic    ,
    WDATA : input  logic<32>,
    RDADDR: input  logic<16>,
    RDEN  : input  logic    ,
    RDATA : output logic<32>,

    // Register output
    DISPON  : output logic    ,
    DISPADDR: output logic<32>,

    // Interrupt, FIFO flag
    DSP_IRQ  : output logic,
    BUF_UNDER: input  logic,
    BUF_OVER : input  logic,
) {
    const WIDX_W: u32 = 10;

    let wr_idx: logic<WIDX_W> = WRADDR[11:2];
    let rd_idx: logic<WIDX_W> = RDADDR[11:2];

    const IDX_DISPADDR: logic<WIDX_W> = 10'h000; // 0x0000
    const IDX_DISPCTRL: logic<WIDX_W> = 10'h001; // 0x0004
    const IDX_DISPINT : logic<WIDX_W> = 10'h002; // 0x0008
    const IDX_DISPFIFO: logic<WIDX_W> = 10'h003; // 0x000C

    // DISPCTRL bits
    const B_DISPON: u8 = 0;
    const B_VBLANK: u8 = 1;

    // DISPINT bits
    const B_INT_EN : u8 = 0;
    const B_INT_CLR: u8 = 1;

    // DISPFIFO bits
    const B_UF_FLG: u8 = 0;
    const B_OF_FLG: u8 = 1;

    // Registers
    var reg_dispaddr: logic<32>;
    var reg_dispctrl: logic<32>;
    var reg_dispint : logic<32>;
    var reg_dispfifo: logic<32>;
    var read_data   : logic<32>;
    var irq_pending : bit      ;

    // VSYNC fall
    var vsync_prev: logic;
    always_ff {
        vsync_prev = DSP_VSYNC_X;
    }
    let vsync_negedge: logic = vsync_prev & ~DSP_VSYNC_X;

    // Write decode
    let wr_hit: logic = WREN && WRADDR[15:12] == 4'h0;
    let rd_hit: logic = RDEN && RDADDR[15:12] == 4'h0;
    let wr32  : logic = wr_hit && &BYTEEN;

    // Write register
    always_ff {
        if_reset {
            reg_dispaddr = '0;
            reg_dispctrl = '0;
            reg_dispint  = '0;
            reg_dispfifo = '0;
            irq_pending  = 1'b0;
        } else {
            // DISPADDR
            if wr32 && wr_idx == IDX_DISPADDR {
                reg_dispaddr = WDATA;
            }

            // DISPCTRL
            if vsync_negedge {
                reg_dispctrl[B_VBLANK] = 1'b1;
            }

            if wr_hit && wr_idx == IDX_DISPCTRL && BYTEEN[0] {
                reg_dispctrl[B_DISPON] = WDATA[B_DISPON];
                if WDATA[B_VBLANK] {
                    reg_dispctrl[B_VBLANK] = 1'b0;
                }
            }

            // DISPINT
            if wr_hit && wr_idx == IDX_DISPINT && BYTEEN[0] {
                reg_dispint[B_INT_EN] = WDATA[B_INT_EN];
                if WDATA[B_INT_CLR] {
                    irq_pending = 1'b0;
                }
            }

            // IRQ happens
            if reg_dispint[B_INT_EN] && vsync_negedge {
                irq_pending = 1'b1;
            }

            // DISPFIFO
            if BUF_UNDER {
                reg_dispfifo[B_UF_FLG] = 1'b1;
            }
            if BUF_OVER {
                reg_dispfifo[B_OF_FLG] = 1'b1;
            }
            if wr_hit && wr_idx == IDX_DISPFIFO && BYTEEN[0] {
                if WDATA[B_UF_FLG] {
                    reg_dispfifo[B_UF_FLG] = 1'b0;
                }
                if WDATA[B_OF_FLG] {
                    reg_dispfifo[B_OF_FLG] = 1'b0;
                }
            }
        }
    }

    // Read register
    always_comb {
        read_data = 32'h0;
        if rd_hit {
            read_data = case (rd_idx) {
                IDX_DISPADDR: reg_dispaddr,
                IDX_DISPCTRL: reg_dispctrl,
                IDX_DISPINT : reg_dispint,
                IDX_DISPFIFO: reg_dispfifo,
                default     : 32'hDEAD_BEEF,
            };
        }
    }

    assign RDATA    = read_data;
    assign DISPADDR = reg_dispaddr;
    assign DISPON   = reg_dispctrl[B_DISPON];
    assign DSP_IRQ  = irq_pending;
}
