/// VRAM controller
pub module disp_vramctrl (
    // System Signals
    ACLK: input clock, /// system clock
    ARST: input reset, /// system reset

    // Address Read
    ARADDR : output logic<32>,
    ARVALID: output logic    ,
    ARREADY: input  logic    ,

    // Read Data
    RLAST : input  logic,
    RVALID: input  logic,
    RREADY: output logic,

    // Resolution
    RESOL: input Resolution::Mode,

    // Signal by other modules
    VRSTART   : input logic    ,
    DISPON    : input logic    ,
    DISPADDR  : input logic<32>,
    BUF_WREADY: input logic    ,
) {
    var hsc: logic<11>;
    var hfp: logic<6> ;
    var hpw: logic<8> ;
    var hbp: logic<8> ;
    var hdo: logic<11>;
    var vsc: logic<11>;
    var vfp: logic<4> ;
    var vpw: logic<3> ;
    var vbp: logic<6> ;
    var vdo: logic<11>;

    inst i_tming: SyncgenTimingSel (
        mode: RESOL,
        hsc        ,
        hfp        ,
        hpw        ,
        hbp        ,
        hdo        ,
        vsc        ,
        vfp        ,
        vpw        ,
        vbp        ,
        vdo        ,
    );

    const BURST_BYTES    : u32 = 64; // 32beat * 64bit
    const BYTES_PER_PIXEL: u32 = 4;

    let frame_bytes: logic<32> = hdo * vdo * BYTES_PER_PIXEL;

    // Sync VRSTART
    var vrstart_meta: logic;
    var vrstart_sync: logic;
    var vrstart_rise: logic;

    always_ff {
        if_reset {
            vrstart_meta = 0'b0;
            vrstart_sync = 0'b0;
        } else {
            vrstart_meta = VRSTART;
            vrstart_sync = vrstart_meta;
        }
    }
    assign vrstart_rise = VRSTART & ~vrstart_sync;

    enum ARState {
        idle,
        saddr,
        wait,
    }
    enum SRState {
        wait,
        read,
    }

    var ar_state     : ARState;
    var ar_state_next: ARState;

    // address offset
    var cur_addr     : logic<32>;
    var cur_addr_next: logic<32>;

    var frame_active     : logic;
    var frame_active_next: logic;

    var outstanding     : u32;
    var outstanding_next: u32;

    // Address FSM
    always_comb {
        ar_state_next     = ar_state;
        cur_addr_next     = cur_addr;
        frame_active_next = frame_active;
        outstanding_next  = outstanding;

        ARADDR  = DISPADDR + cur_addr;
        ARVALID = 1'b0;

        case ar_state {
            ARState::idle: {
                if vrstart_rise && DISPON {
                    frame_active_next = 1'b1;
                    cur_addr_next     = 32'd0;
                    outstanding_next  = 0;
                    ar_state_next     = ARState::wait;
                }
            }
            ARState::saddr: {
                ARVALID = 1'b1;
                if ARVALID && ARREADY {
                    outstanding_next = outstanding + 1;
                    cur_addr_next    = cur_addr + BURST_BYTES;
                    ar_state_next    = ARState::wait;
                    if cur_addr_next >= frame_bytes {
                        frame_active_next = 1'b0;
                    }
                }
            }
            ARState::wait: {
                if !frame_active {
                    ar_state_next = ARState::idle;
                } else if BUF_WREADY {
                    ar_state_next = ARState::saddr;
                }
            }
        }
    }

    var sr_state     : SRState;
    var sr_state_next: SRState;

    // Data FSM
    always_comb {
        sr_state_next = sr_state;
        RREADY        = (sr_state == SRState::read);

        case sr_state {
            SRState::wait: {
                if outstanding >: 0 {
                    sr_state_next = SRState::read;
                }
            }
            SRState::read: {
                if outstanding == 0 {
                    sr_state_next = SRState::wait;
                }
            }
        }
    }

    let plus_ar: logic = (ar_state == ARState::saddr) && ARVALID && ARREADY;
    let minus_r: logic = (sr_state == SRState::read) && RVALID && RLAST && RREADY;

    // Update registers
    always_ff {
        if_reset {
            ar_state     = ARState::idle;
            sr_state     = SRState::wait;
            cur_addr     = 32'd0;
            outstanding  = 0;
            frame_active = 1'b0;
        } else {
            ar_state     = ar_state_next;
            sr_state     = sr_state_next;
            cur_addr     = cur_addr_next;
            frame_active = frame_active_next;
            // outstanding counter
            outstanding = (outstanding + (if plus_ar ? 1 : 0) - (if minus_r ? 1 : 0));
        }
    }
}
