pub module disp_buffer (
    // System Signals
    ACLK: input 'a clock,
    ARST: input 'a reset,

    // Display Clock, Reset
    DCLK: input '_ default clock,
    DRST: input '_ default reset,

    // FIFO WRITE side (from disp_vramctrl)
    DISPON   : input logic    ,
    FIFORST  : input logic    ,
    FIFOIN   : input logic<64>,
    FIFOWR   : input logic    ,
    DSP_preDE: input logic    ,

    // FIFO status
    BUF_WREADY: output logic,
    BUF_OVER  : output logic,
    BUF_UNDER : output logic,

    // Output
    DSP_R : output logic<8>,
    DSP_G : output logic<8>,
    DSP_B : output logic<8>,
    DSP_DE: output logic   ,
) {
    const BUF_MAX: logic<10> = 10'd768; // 1024 - 256

    let fifo_wdata   : logic<48> = {FIFOIN[23:0], FIFOIN[55:32]};
    let fifo_wr_en   : logic     = FIFOWR & DISPON;
    let fifo_rd_en   : logic     = DSP_preDE & DISPON;
    var fifo_valid   : logic    ;
    var fifo_wr_count: logic<10>;

    var pixel_data: logic<24>;

    // FIFO
    unsafe (cdc) {
        inst i_fifo_48in24out_1024depth: $sv::fifo_48in24out_1024depth (
            rst          : FIFORST      , // (FIFORST | ARST)
            wr_clk       : ACLK         ,
            rd_clk       : DCLK         ,
            din          : fifo_wdata   ,
            wr_en        : fifo_wr_en   ,
            rd_en        : fifo_rd_en   ,
            dout         : pixel_data   ,
            full         : _            ,
            overflow     : BUF_OVER     ,
            empty        : _            ,
            valid        : fifo_valid   ,
            underflow    : BUF_UNDER    ,
            wr_data_count: fifo_wr_count,
        );
    }

    // BUF_WREADY: less than 256word
    assign BUF_WREADY = (fifo_wr_count <: BUF_MAX);
    // assign BUF_WREADY = (fifo_wr_count[9:2] <: BUF_MAX[9:2]);

    // 1clk after, fifo_valid and fifo_rdata comes
    var valid_d0: logic    ;
    var pixel_d0: logic<24>;
    var pixel_d1: logic<24>;
    always_ff {
        if_reset {
            valid_d0 = 1'b0;
            pixel_d0 = 24'h0;
            pixel_d1 = 24'h0;
        } else {
            valid_d0 = fifo_valid;
            pixel_d0 = pixel_data;
            pixel_d1 = pixel_d0;
        }
    }

    // DSP_DE: 2clk delayed DSP_preDE
    var de_pipe: logic<2>;
    always_ff {
        if_reset {
            de_pipe = 2'b00;
        } else {
            de_pipe = {de_pipe[0], DSP_preDE & DISPON};
        }
    }
    assign DSP_DE = de_pipe[1];

    // Output
    assign DSP_R = pixel_d1[23:16];
    assign DSP_G = pixel_d1[15:8];
    assign DSP_B = pixel_d1[7:0];
}
