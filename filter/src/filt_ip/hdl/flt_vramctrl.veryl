/// VRAM Control
///
/// - Read the source image from DDR via the AXI bus.
/// - Store the read source image into the source FIFO (src FIFO).
/// - Read data from the source FIFO and send it to fit_proc.
/// - Store the post-filter data into the write FIFO (wrt FIFO).
/// - Read data from the write FIFO and write it back to DDR.
pub module flt_vramctrl (
    CLK : input clock,
    ARST: input reset,
    RSTS: input reset, // module reset (High)

    RESOL: input Resolution::Mode,

    // Read Address
    ARADDR : output logic<32>,
    ARVALID: output logic    ,
    ARLEN  : output logic<8> ,
    ARREADY: input  logic    ,

    // Read Data
    RDATA : input  logic<32>,
    RLAST : input  logic    ,
    RVALID: input  logic    ,
    RREADY: output logic    ,

    // Write Address
    AWADDR : output logic<32>,
    AWVALID: output logic    ,
    AWLEN  : output logic<8> ,
    AWREADY: input  logic    ,

    // Write Data
    WDATA : output logic<32>,
    WLAST : output logic    ,
    WVALID: output logic    ,
    WSTRB : output logic<4> ,
    WREADY: input  logic    ,

    // Response
    BVALID: input  logic,
    BREADY: output logic,

    FLTRG_START  : input logic    ,
    FLTRG_VRAMSRC: input logic<32>,
    FLTRG_VRAMFRM: input logic<32>,

    FLTPC_WDATAVLD: input logic    ,
    FLTPC_WDATA   : input logic<32>,

    FLTVC_SDATAVLD: output logic    ,
    FLTVC_SDATA   : output logic<32>,

    FLTVC_BUSY: output logic,
    FLTVC_INT : output logic,
) {
    let rst: '_ default reset_sync_high = ARST | RSTS;

    const BLEN        : u32 = 16; // beats per burst
    const FIFO_DEPTH  : u32 = 1024;
    const SRC_SAFE_GAP: u32 = 2;

    // TODO: make common module
    var width : logic<16>;
    var height: logic<16>;
    always_comb {
        case RESOL {
            Resolution::Mode::vga: {
                width  = 16'd640;
                height = 16'd480;
            }
            Resolution::Mode::xga: {
                width  = 16'd1024;
                height = 16'd768;
            }
            Resolution::Mode::sxga: {
                width  = 16'd1280;
                height = 16'd1024;
            }
            default: {
                width  = 16'd640;
                height = 16'd480;
            }
        }
    }
    let line_bytes: logic<32> = {width, 2'b00};

    enum LineState {
        idle,
        read,
        write,
        done,
    }

    var line_state: LineState    ;
    var line_index: logic    <16>;

    var start_q: logic;
    always_ff {
        if_reset {
            start_q = 1'b0;
        } else {
            start_q = FLTRG_START;
        }
    }
    let start_pulse: logic = FLTRG_START & ~start_q;

    // Busy/INT
    var busy_d    : logic;
    assign FLTVC_BUSY = (line_state != LineState::idle);

    always_ff {
        if_reset {
            line_state = LineState::idle;
            line_index = 16'd0;
            busy_d     = 1'b0;
            FLTVC_INT  = 1'b0;
        } else {
            busy_d = FLTVC_BUSY;
            case line_state {
                LineState::idle: {
                    if start_pulse {
                        line_state = LineState::read;
                        line_index = 16'd0;
                    }
                }
                LineState::read: {
                    if rd_line_done {
                        line_state = LineState::write;
                    }
                }
                LineState::write: {
                    if wr_line_done {
                        if line_index == height - 1 {
                            line_state = LineState::done;
                        } else {
                            line_index += 1;
                            line_state =  LineState::read;
                        }
                    }
                }
                LineState::done: {
                    line_state = LineState::idle;
                }
            }
            FLTVC_INT = (busy_d == 1'b1) && (FLTVC_BUSY == 1'b0); // BUSY falling edge
        }
    }

    // Source data FIDO (R -> PROC)
    var src_dout : logic<32>;
    var src_empty: logic    ;
    var src_full : logic    ;
    var src_valid: logic    ;
    var src_rd_en: logic    ;
    var src_wr_en: logic    ;
    var src_count: logic<12>;

    inst u_fifo_src: $sv::fifo_32in32out_2048depth (
        clk       : CLK      ,
        din       : RDATA    ,
        rd_en     : src_rd_en,
        rst       : rst      ,
        wr_en     : src_wr_en,
        dout      : src_dout ,
        empty     : src_empty,
        full      : src_full ,
        overflow  : _        ,
        valid     : src_valid,
        underflow : _        ,
        data_count: src_count,
    );

    // Write data FIFO (PROC -> W)
    var wrt_dout : logic<32>;
    var wrt_empty: logic    ;
    var wrt_full : logic    ;
    var wrt_valid: logic    ;
    var wrt_rd_en: logic    ;
    var wrt_wr_en: logic    ;
    var wrt_count: logic<12>;

    inst u_fifo_wrt: $sv::fifo_32in32out_2048depth (
        clk       : CLK        ,
        din       : FLTPC_WDATA,
        rd_en     : wrt_rd_en  ,
        rst       : rst        ,
        wr_en     : wrt_wr_en  ,
        dout      : wrt_dout   ,
        empty     : wrt_empty  ,
        full      : wrt_full   ,
        overflow  : _          ,
        valid     : wrt_valid  ,
        underflow : _          ,
        data_count: wrt_count  ,
    );

    assign FLTVC_SDATA    = src_dout;
    assign FLTVC_SDATAVLD = src_valid;
    assign src_rd_en      = src_valid;
    assign wrt_wr_en      = FLTPC_WDATAVLD;

    // READ (AR/R) FSM
    enum RState {
        idle,
        set_addr,
        read,
        wait,
    }
    var r_state    : RState    ;
    var r_addr     : logic <32>;
    var r_line_rem : logic <16>;
    var r_beats_rem: logic <8> ;
    var r_inflight : logic     ;

    let rd_line_done: logic = (r_line_rem == 16'd0) && !r_inflight && (r_beats_rem == 8'd0);

    always_ff {
        if_reset {
            ARADDR      = 32'd0;
            ARLEN       = 8'd0;
            ARVALID     = 1'b0;
            RREADY      = 1'b0;
            r_state     = RState::idle;
            r_addr      = 32'd0;
            r_line_rem  = 16'd0;
            r_beats_rem = 8'd0;
            r_inflight  = 1'b0;
            src_wr_en   = 1'b0;
        } else {
            case r_state {
                RState::idle: {
                    RREADY = 1'b0;
                    if line_state == LineState::read {
                        r_addr      = FLTRG_VRAMSRC + (line_bytes * line_index);
                        r_line_rem  = width;
                        r_beats_rem = 8'd0;
                        r_inflight  = 1'b0;
                        r_state     = RState::set_addr;
                    }
                }
                RState::set_addr: {
                    // issue AR when FIFO has room
                    if !ARVALID && !r_inflight && (r_line_rem != 0) && (src_count <= FIFO_DEPTH - SRC_SAFE_GAP) {
                        ARADDR  = r_addr;
                        ARLEN   = (if r_line_rem >= BLEN ? BLEN[7:0] : r_line_rem[7:0]) - 1;
                        ARVALID = 1'b1;
                    }
                    // handshake
                    if ARVALID && ARREADY {
                        ARVALID     =  1'b0;
                        r_inflight  =  1'b1;
                        r_beats_rem =  ARLEN + 1;
                        r_addr      += {24'h0, ARLEN + 1} << 2;
                        r_line_rem  -= ARLEN + 1;
                        r_state     =  RState::read;
                    }
                }
                RState::read: {
                    // Accept data when FIFO can accept it
                    RREADY = (src_count <= FIFO_DEPTH - SRC_SAFE_GAP);
                    if RVALID && RREADY {
                        r_beats_rem -= 1;
                        src_wr_en   =  1'b1;
                        if RLAST || r_beats_rem == 8'd1 {
                            r_inflight = 1'b0;
                            r_state    = if r_line_rem != 0 ? RState::set_addr : RState::wait;
                        }
                    } else {
                        src_wr_en = 1'b0;
                    }
                }
                RState::wait: {
                    RREADY = 1'b0;
                    if line_state != LineState::read {
                        r_state = RState::idle;
                    } else if r_line_rem == 0 && !r_inflight && r_beats_rem == 0 {
                        // wait here until line manager switches to WRITE
                        r_state = RState::wait;
                    }
                }
            }
            if !(RVALID && RREADY) {
                src_wr_en = 1'b0; // ensure single-cycle pulse
            }
        }
    }

    // src_wr_en combinational pulse already ensured above

    // WRITE (AW/W/B) FSM
    enum WState {
        idle,
        set_addr,
        write,
        wait,
    }
    var w_state    : WState    ;
    var w_addr     : logic <32>;
    var w_line_rem : logic <16>;
    var w_beats_rem: logic <8> ;
    var w_on_txn   : logic     ;

    var end_of_burst: logic;

    var wdata_q      : logic<32>;
    var wdata_q_valid: logic    ;

    assign WSTRB  = 4'hF;
    assign BREADY = (w_state == WState::wait);

    let wwant : logic<8> = if w_line_rem >= BLEN ? BLEN[7:0] : w_line_rem[7:0];
    let wavail: logic<8> = if wrt_count[7:0] <: wwant ? wrt_count[7:0] : wwant;

    always_ff {
        if_reset {
            w_state       = WState::idle;
            AWADDR        = 32'd0;
            AWLEN         = 8'd0;
            AWVALID       = 1'b0;
            WDATA         = 32'd0;
            WLAST         = 1'b0;
            WVALID        = 1'b0;
            w_addr        = 32'd0;
            w_line_rem    = 16'd0;
            w_beats_rem   = 8'd0;
            w_on_txn      = 1'b0;
            end_of_burst  = 1'b0;
            wrt_rd_en     = 1'b0;
            wdata_q       = 32'd0;
            wdata_q_valid = 1'b0;
        } else {
            wrt_rd_en = 1'b0;

            case w_state {
                WState::idle: {
                    WVALID        = 1'b0;
                    WLAST         = 1'b0;
                    end_of_burst  = 1'b0;
                    w_on_txn      = 1'b0;
                    wdata_q_valid = 1'b0;
                    if line_state == LineState::write {
                        w_addr     = FLTRG_VRAMFRM + line_bytes * line_index;
                        w_line_rem = width;
                        w_state    = WState::set_addr;
                    }
                }
                WState::set_addr: {
                    // choose burst size limited by remaining line and FIFO content
                    if !AWVALID && !w_on_txn && (w_line_rem != 0) && (wrt_count != 16'd0) {
                        if wavail != 8'd0 {
                            AWADDR  = w_addr;
                            AWLEN   = wavail - 1;
                            AWVALID = 1'b1;
                        }
                    }
                    if AWVALID && AWREADY {
                        AWVALID     =  1'b0;
                        w_on_txn    =  1'b1;
                        w_beats_rem =  AWLEN + 1;
                        w_addr      += {24'h0, AWLEN + 1} << 2;
                        w_line_rem  -= AWLEN + 1;
                        // prefetch first beat into local buffer (one cycle latter via wrt_valid)
                        wrt_rd_en = 1'b1;
                        w_state   = WState::write;
                    }
                }
                WState::write: {
                    // load buffer when not holding data and FIFO has presented valid
                    if !wdata_q_valid && wrt_valid {
                        wdata_q       = wrt_dout;
                        wdata_q_valid = 1'b1;
                    }
                    // drive W from buffer, hold until WREADY
                    WDATA  = wdata_q;
                    WVALID = wdata_q_valid && !end_of_burst;
                    WLAST  = (w_beats_rem == 8'd1) && wdata_q_valid;

                    // When W beat accepted, drop buffer valid and fetch next (unless last)
                    if WVALID && WREADY {
                        wdata_q_valid =  1'b0;
                        wrt_rd_en     =  !WLAST;
                        w_beats_rem   -= 1;
                        if WLAST {
                            end_of_burst = 1'b1;
                            w_on_txn     = 1'b0;
                            w_state      = WState::wait;
                        }
                    }
                }
                WState::wait: {
                    // wait for BRESP (one per burst)
                    if BVALID && BREADY {
                        end_of_burst = 1'b0;
                        if w_line_rem == 0 && wrt_count == 0 && !wdata_q_valid {
                            // line fully written
                            w_state = WState::idle;
                        } else {
                            w_state = WState::set_addr;
                        }
                    }
                }
            }
        }
    }

    // line done when write FSM returned to IDLE while line_state == LineState::write
    let wr_line_done: logic = (w_state == WState::idle) && (line_state == LineState::write);
}
